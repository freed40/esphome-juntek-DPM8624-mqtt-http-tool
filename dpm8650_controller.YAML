esphome:
  name: dpm8650_controller
  platform: ESP32
  board: esp32dev

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

logger:
  level: INFO  # Set the global log level to INFO (or ERROR, or NONE for no logs)

api:

web_server:
  version: 3

ota:
  - platform: esphome
    password: "afafd3c4bba9467b8f842f8d622f1435"


mqtt:
   broker: !secret mqtt_host
   username: !secret mqtt_username
   password: !secret mqtt_password
   id: mqtt_client

# UART configuration for RS485 communication
uart:
  tx_pin: GPIO17
  rx_pin: GPIO16
  baud_rate: 9600
  stop_bits: 1
  parity: NONE

modbus_controller:
  - id: modbus1
    address: 1
    update_interval: 1500ms  # Polling interval for Modbus queries
    command_throttle: 100ms   # Throttle commands to prevent overlapping





binary_sensor:
  - platform: modbus_controller
    modbus_controller_id: modbus1
    name: "CCCV Output State"
    icon: "mdi:flash"  # Example: Lightning bolt icon for power output state
    address: 0x1000  # Register for CCCV output state (1000H)
    register_type: holding
    filters:
      - lambda: |-
          if (x == 0) {
            id(cccv_output_state).publish_state("No Output");
          } else if (x == 1) {
            id(cccv_output_state).publish_state("CV");
          } else if (x == 2) {
            id(cccv_output_state).publish_state("CC");
          }
          return x == 1 || x == 2;  // True for CV or CC states, False for No Output
    device_class: "power"

# Add a text sensor to display the CCCV output state as a human-readable label
text_sensor:
  - platform: template
    name: "CCCV Output State Label"
    id: cccv_output_state
    icon: "mdi:power-plug"  # Optional: icon for display in Home Assistant


  - platform: mqtt_subscribe
    name: "MQTT Voltage Command"
    id: mqtt_voltage_command
    topic: "home/commands/voltage"
    internal: true  # This makes the sensor internal
    on_value:
      then:
        - lambda: |-
            float voltage = atof(x.c_str());  // Convert received string to float
            if (voltage >= 0 && voltage <= 60) {  // Check bounds
              id(set_voltage).publish_state(voltage);
            } else {
              ESP_LOGW("MQTT", "Received invalid voltage value: %.2f", voltage);
            }
  - platform: mqtt_subscribe
    name: "MQTT Current Command"
    id: mqtt_current_command
    topic: "home/commands/current"
    internal: true  # This makes the sensor internal
    on_value:
      then:
        - lambda: |-
            float current = atof(x.c_str());  // Convert received string to float
            if (current >= 0 && current <= 50) {  // Check bounds
              id(set_current).publish_state(current);
            } else {
              ESP_LOGW("MQTT", "Received invalid current value: %.2f", current);
            }

number:
  - platform: template
    name: "Set MAX Voltage"
    id: set_voltage
    icon: "mdi:flash"
    min_value: 0
    max_value: 60
    step: 0.1
    optimistic: true
    mode: BOX
    restore_value: true
    set_action:
      - lambda: |-
          ESP_LOGD("voltage", "Old Value: %.2f V", id(set_voltage).state);  // Just logging, no command sent
          // The actual Modbus command is not sent here
          
    on_value:
      then:
        - delay: 10ms  #Small delay to ensure the value is properly updated
        - lambda: |-
            ESP_LOGI("voltage", "Updating MAX Voltage to: %.2f V", id(set_voltage).state);
            int voltage = id(set_voltage).state * 100;
            auto command = esphome::modbus_controller::ModbusCommandItem::create_write_single_command(id(modbus1), 0x0000, voltage);
            id(modbus1)->queue_command(command);

 

  - platform: template
    name: "Set MAX Current"
    id: set_current
    icon: "mdi:current-ac"
    min_value: 0
    max_value: 50
    step: 0.1
    optimistic: true
    mode: BOX
    restore_value: true
    set_action:
      - lambda: |-
          ESP_LOGD("current", "Old Value: %.2f A", id(set_current).state);  // Just logging, no command sent

    on_value:
      then:
        - delay: 0.01s  # Small delay to ensure the value is properly updated
        - lambda: |-
            int current = id(set_current).state * 1000;  // Convert to Modbus format
            ESP_LOGI("current", "Setting MAX Current to: %.3f A", id(set_current).state);  // Log the new value
            auto command = esphome::modbus_controller::ModbusCommandItem::create_write_single_command(id(modbus1), 0x0001, current);
            id(modbus1)->queue_command(command);  // Send the Modbus command
 
sensor:

  - platform: modbus_controller
    modbus_controller_id: modbus1
    name: "MAX Output Voltage"
    icon: "mdi:flash"  # Icon for MAX Output Voltage
    address: 0x0000
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    accuracy_decimals: 2
    filters:
      - multiply: 0.01


  - platform: modbus_controller
    modbus_controller_id: modbus1
    name: "MAX Output Current"
    icon: "mdi:current-ac"  # Icon for MAX Output Current
    address: 0x0001
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "A"
    accuracy_decimals: 3
    filters:
      - multiply: 0.001
    

  - platform: modbus_controller
    modbus_controller_id: modbus1
    name: "Output Voltage"
    icon: "mdi:flash"  # Icon for Output Voltage
    address: 0x1001
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
    
  
  - platform: modbus_controller
    modbus_controller_id: modbus1
    name: "Output Current"
    icon: "mdi:current-ac"  # Icon for Output Current
    address: 0x1002
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "A"
    accuracy_decimals: 3
    filters:
      - multiply: 0.001
    

  - platform: modbus_controller
    modbus_controller_id: modbus1
    name: "Temperature"
    icon: "mdi:thermometer"  # Icon for Temperature
    address: 0x1003
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "Â°C"
    accuracy_decimals: 1
    filters:
      - multiply: 1
    




switch:
  - platform: template
    name: "Output Control"
    icon: "mdi:power"  # Icon for Output Control
    id: output_control
    optimistic: true
    turn_on_action:
      - lambda: |-
          std::vector<uint16_t> enable_payload = {1};
          esphome::modbus_controller::ModbusCommandItem enable_command =
              esphome::modbus_controller::ModbusCommandItem::create_write_single_command(id(modbus1), 0x0002, enable_payload[0]);
          id(modbus1)->queue_command(enable_command);
      - delay: 100ms
    turn_off_action:
      - lambda: |-
          std::vector<uint16_t> disable_payload = {0};
          esphome::modbus_controller::ModbusCommandItem disable_command =
              esphome::modbus_controller::ModbusCommandItem::create_write_single_command(id(modbus1), 0x0002, disable_payload[0]);
          id(modbus1)->queue_command(disable_command);
      - delay: 100ms
    


