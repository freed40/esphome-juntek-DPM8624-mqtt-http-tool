esphome:
  name: dpm8650_controller
  platform: ESP32
  board: esp32dev

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

logger:
  level: INFO  # Set the global log level to INFO (or ERROR, or NONE for no logs)

#api:

#web_server:
#  version: 3

ota:
  - platform: esphome
    password: "afafd3c4bba9467b8f842f8d622f1435"


mqtt:
   broker: !secret mqtt_host
   username: !secret mqtt_username
   password: !secret mqtt_password
   id: mqtt_client

# UART configuration for RS485 communication
uart:
  tx_pin: GPIO17
  rx_pin: GPIO16
  baud_rate: 9600
  stop_bits: 1
  parity: NONE

modbus_controller:
  - id: modbus1
    address: 1
    update_interval: 1500ms  # Polling interval for Modbus queries
    command_throttle: 100ms   # Throttle commands to prevent overlapping

globals:

  - id: reset_energy
    type: bool
    restore_value: false
    initial_value: "false"

  - id: energy_wh
    type: float
    restore_value: true  # Ensures the value persists across reboots
    initial_value: "0.0"

button:
  - platform: template
    name: "Reset Energy Consumption"
    icon: "mdi:restart"  # A nice restart icon for resetting energy consumption
    on_press:
      then:
        - lambda: |-
            id(reset_energy) = true;  // Set the reset flag



# Add a text sensor to display the CCCV output state as a human-readable label
text_sensor:
  - platform: template
    name: "OFF-CV-CC Status"
    lambda: |-
      if (id(off_cv_cc_sensor).state == 0) {
        return std::string("Output disabled");
      } else if (id(off_cv_cc_sensor).state == 1) {
        return std::string("CV");
      } else if (id(off_cv_cc_sensor).state == 2) {
        return std::string("CC");
      } else {
        return std::string("Unknown");
      }
    update_interval: 1s  # Adjust as needed
    icon: "mdi:flash"

  - platform: template
    name: "Output State"
    lambda: |-
      if (id(on_off_sensor).state == 0) {
        return std::string("STOP");
      } else if (id(on_off_sensor).state == 1) {
        return std::string("RUN");
      } else {
        return std::string("Unknown");
      }
    update_interval: 1s  # Adjust based on your needs
    icon: "mdi:power"

  - platform: mqtt_subscribe
    name: "MQTT Voltage Command"
    id: mqtt_voltage_command
    topic: "home/commands/voltage"
    internal: true  # This makes the sensor internal
    on_value:
      then:
        - lambda: |-
            float voltage = atof(x.c_str());  // Convert received string to float
            if (voltage >= 0 && voltage <= 60) {  // Check bounds
              id(set_voltage).publish_state(voltage);
            } else {
              ESP_LOGW("MQTT", "Received invalid voltage value: %.2f", voltage);
            }
  - platform: mqtt_subscribe
    name: "MQTT Current Command"
    id: mqtt_current_command
    topic: "home/commands/current"
    internal: true  # This makes the sensor internal
    on_value:
      then:
        - lambda: |-
            float current = atof(x.c_str());  // Convert received string to float
            if (current >= 0 && current <= 50) {  // Check bounds
              id(set_current).publish_state(current);
            } else {
              ESP_LOGW("MQTT", "Received invalid current value: %.2f", current);
            }

number:
  - platform: template
    name: "Set MAX Voltage"
    id: set_voltage
    icon: "mdi:flash"
    min_value: 0
    max_value: 60
    step: 0.1
    optimistic: true
    mode: BOX
    restore_value: true
    set_action:
      - lambda: |-
          ESP_LOGD("voltage", "Old Value: %.2f V", id(set_voltage).state);  // Just logging, no command sent
    on_value:
      then:
        - delay: 10ms  #Small delay to ensure the value is properly updated
        - lambda: |-
            ESP_LOGI("voltage", "Updating MAX Voltage to: %.2f V", id(set_voltage).state);
            int voltage = id(set_voltage).state * 100;
            auto command = esphome::modbus_controller::ModbusCommandItem::create_write_single_command(id(modbus1), 0x0000, voltage);
            id(modbus1)->queue_command(command);

 

  - platform: template
    name: "Set MAX Current"
    id: set_current
    icon: "mdi:current-ac"
    min_value: 0
    max_value: 50
    step: 0.1
    optimistic: true
    mode: BOX
    restore_value: true
    set_action:
      - lambda: |-
          ESP_LOGD("current", "Old Value: %.2f A", id(set_current).state);  // Just logging, no command sent
    on_value:
      then:
        - delay: 0.01s  # Small delay to ensure the value is properly updated
        - lambda: |-
            int current = id(set_current).state * 1000;  // Convert to Modbus format
            ESP_LOGI("current", "Setting MAX Current to: %.3f A", id(set_current).state);  // Log the new value
            auto command = esphome::modbus_controller::ModbusCommandItem::create_write_single_command(id(modbus1), 0x0001, current);
            id(modbus1)->queue_command(command);  // Send the Modbus command
 
sensor:

  - platform: modbus_controller
    modbus_controller_id: modbus1
    name: "MAX Output Voltage"
    icon: "mdi:flash"  # Icon for MAX Output Voltage
    address: 0x0000
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    accuracy_decimals: 2
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: modbus1
    name: "MAX Output Current"
    icon: "mdi:current-ac"  # Icon for MAX Output Current
    address: 0x0001
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "A"
    accuracy_decimals: 3
    filters:
      - multiply: 0.001
    
  - platform: modbus_controller
    modbus_controller_id: modbus1
    name: "Output Voltage"
    icon: "mdi:flash"
    address: 0x1001
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "V"
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
    id: output_voltage  # ID for use in calculations

  - platform: modbus_controller
    modbus_controller_id: modbus1
    name: "Output Current"
    icon: "mdi:current-ac"
    address: 0x1002
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "A"
    accuracy_decimals: 3
    filters:
      - multiply: 0.001
    id: output_current  # ID for use in calculations

  - platform: template
    name: "Output Power"
    icon: "mdi:flash-outline"
    unit_of_measurement: "W"
    accuracy_decimals: 2
    update_interval: 1s
    lambda: |-
      return id(output_voltage).state * id(output_current).state;
    id: output_power  # ID for the Watt-hour meter

  - platform: template
    name: "Energy Consumption"
    icon: "mdi:counter"
    unit_of_measurement: "Wh"
    accuracy_decimals: 2
    update_interval: 1s
    lambda: |-
      if (id(reset_energy)) {
        id(energy_wh) = 0.0;  // Reset the energy counter
        id(reset_energy) = false;  // Clear the reset flag
      }
      id(energy_wh) += id(output_power).state / 3600.0;  // Increment by power (W) divided by seconds in an hour
      return id(energy_wh);
    id: energy_consumption

  - platform: modbus_controller
    modbus_controller_id: modbus1
    name: "Temperature"
    icon: "mdi:thermometer"  # Icon for Temperature
    address: 0x1003
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "Â°C"
    accuracy_decimals: 1
    filters:
      - multiply: 1
    
  - platform: modbus_controller
    modbus_controller_id: modbus1
    name: "On/Off Raw"
    id: on_off_sensor 
    address: 0x0002
    register_type: holding
    icon: "mdi:power"  # Icon for Output Control
    value_type: U_WORD
    unit_of_measurement: ""
    accuracy_decimals: 0
    internal: True

  - platform: modbus_controller
    modbus_controller_id: modbus1
    name: "Total Ah meter"
    address: 0x0004  
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "Ah"
    icon: "mdi:counter"
    accuracy_decimals: 2
    filters:
      - multiply: 0.01    

  - platform: modbus_controller
    modbus_controller_id: modbus1
    name: "OFF-CV-CC Raw"
    icon: "mdi:power"
    id: off_cv_cc_sensor  
    address: 0x1000  
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: ""
    accuracy_decimals: 0
    internal: True

  - platform: modbus_controller
    modbus_controller_id: modbus1
    name: "Device AMP Limit"
    icon: "mdi:information-outline"
    address: 0x1005  
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "A"
    accuracy_decimals: 0
    retain: True
    filters:
      - multiply: 0.001 

switch:
  - platform: template
    name: "Output Control"
    icon: "mdi:power"  # Icon for Output Control
    id: output_control
    optimistic: true
    turn_on_action:
      - lambda: |-
          std::vector<uint16_t> enable_payload = {1};
          esphome::modbus_controller::ModbusCommandItem enable_command =
              esphome::modbus_controller::ModbusCommandItem::create_write_single_command(id(modbus1), 0x0002, enable_payload[0]);
          id(modbus1)->queue_command(enable_command);
      - delay: 100ms
    turn_off_action:
      - lambda: |-
          std::vector<uint16_t> disable_payload = {0};
          esphome::modbus_controller::ModbusCommandItem disable_command =
              esphome::modbus_controller::ModbusCommandItem::create_write_single_command(id(modbus1), 0x0002, disable_payload[0]);
          id(modbus1)->queue_command(disable_command);
      - delay: 100ms
    


